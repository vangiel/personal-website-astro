---
import NavHeader from "@/components/NavHeader.astro";
import Footer from "@/sections/Footer.astro";
import "@/styles/global-variables.css";
import "@/styles/reset.css";
import "@fontsource-variable/roboto-flex";
import "@fontsource/merienda";
import { ViewTransitions } from "astro:transitions";

interface Props {
	title: string;
}

const { title } = Astro.props;
const currentPath = Astro.url.pathname;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta
			name="description"
			content="This is the Daniel Rodriguez Criado's personal website and protfolio"
		/>
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg?v=4" />
		<meta name="color-schmeme" content="light dark" />
		<meta name="generator" content={Astro.generator} />
		<meta name="author" content="Daniel Rodriguez Criado" />
		<title>Dr Daniel | {title}</title>
		<slot name="og-meta">
			<meta property="og:title" content={"Dr Daniel " + title} />
			<meta property="og:type" content="website" />
			<meta property="og:url" content={"https://danielrodriguezcriado.es" + currentPath} />
			<meta
				property="og:image"
				content={"https://danielrodriguezcriado.es/heroImg.webp"}
			/>
		</slot>
		<ViewTransitions />
	</head>
	<body>
		<NavHeader />
		<slot />
		<Footer />
	</body>
</html>

<style is:global>
	:root {
		/* Light mode */
		&[data-theme="light"] {
			color-scheme: light;
			--clr-background: var(--clr-light);

			--clr-text: var(--clr-neutral-800);
			--clr-text-invert: var(--clr-light);

			--clr-primary: var(--clr-yellow-300);
			--clr-secondary: var(--clr-neutral-500);
			--clr-accent: var(--clr-purple-500);

			--bg-img-home: url(../images/home/light-bg.webp);
			--chat-background: url(../icons/chat/background_light.svg)
		}

		/* Dark mode */
		&[data-theme="dark"] {
			color-scheme: dark;
			--clr-background: var(--clr-neutral-800);

			--clr-text: var(--clr-light);
			--clr-text-invert: var(--clr-neutral-800);

			--clr-primary: var(--clr-yellow-300);
			--clr-secondary: var(--clr-neutral-500);
			--clr-accent: var(--clr-purple-400);

			--bg-img-home: url(../images/home/dark-bg.webp);
			--chat-background: url(../icons/chat/background_dark.svg)
		}

		/* Font families */
		--ff-base: "Roboto Flex Variable", sans-serif, system-ui;
		--ff-accent: "merienda", cursive, serif;
	}

	html {
		color-scheme: dark light;
		/* accent-color: oklch(var(--clr-accent)); */
		color: oklch(var(--clr-text));
		font-family: var(--ff-base);
		background-color: oklch(var(--clr-background));
		scroll-behavior: smooth;
	}

	body {
		display: flex;
		flex-direction: column;
		footer {
			margin-block-start: auto;
		}
	}

	/* Utility classes: */
	.visually-hidden:not(:focus):not(:active) {
		clip: rect(0 0 0 0);
		clip-path: inset(50%);
		height: 1px;
		overflow: hidden;
		position: absolute;
		white-space: nowrap;
		width: 1px;
	}

	.overflow-hidden {
		overflow: hidden;
	}

	/* Stop animations on resize */
	.resize-animation-stopper * {
		transition: none !important;
		animation: none !important;
	}
</style>

<script>
	let resizeTimer: ReturnType<typeof setTimeout>;
	window.addEventListener("resize", () => {
		document.body.classList.add("resize-animation-stopper");
		clearTimeout(resizeTimer);
		resizeTimer = setTimeout(() => {
			document.body.classList.remove("resize-animation-stopper");
		}, 400);
	});
</script>
