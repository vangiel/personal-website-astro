---
import SocialIcons from "@/components/SocialIcons.astro";
import PrimaryButton from "@/components/buttons/PrimaryButton.astro";
import BannerImage from "@/images/contact/bannerImg.jpg";
import BounceImage from "@/images/contact/bounce.astro";
import "@/styles/animations.css";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
---

<section class="contact-page-section">
	<!--Info Column-->
	<div class="info-column">
		<Image class="info-image" src={BannerImage} alt="Contact" />
		<h2>Contact Info:</h2>
		<ul class="list-info">
			<li><Icon name="contact/location" />MÃ¡laga, Spain.</li>
			<li><Icon name="contact/email" />dani1610@hotmail.com</li>
		</ul>
		<h2>Follow me on:</h2>
		<SocialIcons fontSize="2.4rem" gap="0.5rem" />
	</div>
	<!--Form Column-->
	<div class="form-column">
		<BounceImage className="bounce-image" />
		<!--Contact Form-->
		<form>
			<label>
				<input type="text" name="name" value="" required />
				<span>Name</span>
			</label>
			<label>
				<input type="email" name="email" value="" required />
				<span>Email</span>
			</label>
			<label>
				<input type="text" name="subject" value="" required />
				<span>Subject</span>
			</label>
			<label>
				<input type="text" name="phone" value="" required />
				<span>Phone</span>
			</label>
			<label>
				<textarea name="message" required></textarea>
				<span>Mesage</span>
			</label>
			<PrimaryButton
				classes="submit-button g-recaptcha"
				data-sitekey="6LfeZOopAAAAAImpk65HKm6m0sJo8N7ZMYaaGFfy"
				reference="submit"
				data-callback="onSubmit"
				data-action="submit"
			>
				Send Now
			</PrimaryButton>
		</form>
		<!--End Contact Form-->
	</div>
</section>

<style>
	section {
		display: grid;
		place-content: center;
		grid-template-columns: 1fr 1fr;
		gap: 4rem;

		width: fit-content;
		margin-inline: auto;

		@media screen and (--media-tablet) {
			grid-template-columns: 1fr;
		}
	}
	.form-column {
		position: relative;
		.bounce-image {
			position: absolute;
			top: -100px;
			right: 0;
			z-index: -1;
			color: oklch(var(--clr-light) / 0.5);
		}
	}

	.form-column form {
		display: flex;
		height: 100%;
		flex-direction: column;
		justify-content: space-between;
		align-items: stretch;
		gap: 1.4em;

		label {
			--_input-padding: 10px;
			position: relative;

			input,
			textarea {
				width: 100%;
				padding: var(--_input-padding);
				border-radius: 0.5rem;

				border: 2px solid oklch(var(--clr-accent) / 0.6);
				outline: none;
				font-size: 1em;
				background-color: oklch(var(--clr-background));
			}
			span {
				margin: 0;
				position: absolute;
				left: 0;
				padding: var(--_input-padding);
				pointer-events: none;
				font-size: 1em;
				color: oklch(var(--clr-accent) / 0.6);
				text-transform: uppercase;
				transition: all 0.3s;
			}

			textarea {
				resize: vertical;
			}

			input:valid ~ span,
			input:focus ~ span,
			textarea:valid ~ span,
			textarea:focus ~ span {
				color: oklch(var(--clr-accent));
				transform: translateX(var(--_input-padding)) translateY(-7px);
				font-size: 0.65em;
				padding-inline: var(--_input-padding);
				padding-block-start: 2px;
				padding-block-end: 0;
				background-color: oklch(var(--clr-background));
				border-left: 2px solid oklch(var(--clr-accent));
				border-right: 2px solid oklch(var(--clr-accent));
				letter-spacing: 0.2em;
			}
		}
	}

	.info-column {
		background-color: oklch(var(--clr-yellow-200));
		color: oklch(var(--clr-neutral-800));
		padding: 2em;
		border-radius: 1em;
		height: fit-content;

		.info-image {
			width: 100%;
			height: 15em;
			object-fit: cover;
			border-radius: 0.5rem;
			margin-block-end: 1.5rem;
			line-height: 0;
		}
		h2 {
			font-size: var(--fs-500);
			font-weight: var(--fw-bold);
		}
		:global(ul) {
			padding-inline-start: 0.5em;
			padding-block: 0.3em;

			li {
				display: flex;
				gap: 0.5em;
				align-items: center;
				[data-icon] {
					font-size: 1.1em;
				}
			}
		}
		@media screen and (--media-tablet) {
			grid-row: 2/3;
		}
	}
</style>

<script is:inline>
	const $form = document.querySelector("form");
	async function sendEmail(captcha, data) {
		if (captcha.success) {
			const res = await fetch("/api/sendEmail.json", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					name: data.get("name"),
					email: data.get("email"),
					subject: data.get("subject"),
					phone: data.get("phone"),
					message: data.get("message"),
				}),
			});
			const resData = await res.json();
			return {
				success: true,
				...resData,
			};
		} else {
			return {
				success: false,
				message: "Captcha not valid",
			};
		}
	}

	function onSubmit(token) {
		const data = new FormData($form);

		fetch("/api/recaptcha", {
			method: "POST",
			body: JSON.stringify({ recaptcha: token }),
		})
			.then((response) => response.json())
			.then((gResponse) => sendEmail(gResponse, data))
			.then((resData) => {
				if (resData.success) {
					const $submitButton = document.querySelector(".submit-button");
					console.log("Form submission successful!");
					$submitButton.disabled = true;
					$submitButton.textContent = "Sent!";
					$form.reset();
				} else {
					console.log("Form submission failed!");
				}
			})
			.catch((err) => {
				console.log(err);
			});
	}
</script>
